from abc import ABC, abstractmethod
from typing import Any, Dict


class LLMClientBase(ABC):
    """Abstract base class for LLM clients.

    Provides a unified interface for initializing an LLM client and generating
    text completions. Concrete subclasses must implement the `generate` method
    according to the provider's API.

    Attributes:
        api_key (str): API key or token for authenticating with the LLM provider.
        model_name (str): Name or identifier of the LLM model to use.
        config (Dict[str, Any]): Additional configuration parameters.
    """

    def __init__(self, api_key: str, model_name: str, **kwargs: Any) -> None:
        """Initialize the LLM client with authentication and model settings.

        Args:
            api_key (str): API key or token for authenticating with the LLM provider.
            model_name (str): Name or identifier of the LLM model to use.
            **kwargs: Provider-specific configuration parameters, such as base URL,
                timeout, or other settings.
        """
        self.api_key: str = api_key
        self.model_name: str = model_name
        self.config: Dict[str, Any] = kwargs

    @abstractmethod
    def generate(
        self,
        prompt: str,
        max_tokens: int,
        temperature: float = 0.0,
        **kwargs: Any,
    ) -> str:
        """Generate a text completion for a given prompt.

        Args:
            prompt (str): The input text prompt to send to the model.
            max_tokens (int): The maximum number of tokens to generate.
            temperature (float, optional): Sampling temperature for generation.
                A value between 0.0 and 1.0. Defaults to 0.0.
            **kwargs: Additional provider-specific parameters (e.g., top_p, stop
                sequences, n, etc.).

        Returns:
            str: The text generated by the LLM.

        Raises:
            RuntimeError: If the generation request fails or returns an error.
        """
        pass
